Solution:
# Task 1:
I read the number of elements on the line in the "nr_el_row" array.
Then i read all other values in "list_of_elements" array, dinamically allocated.
I inverted each element with a function to match the requirement output.
With the following function, I calculate the required arithmetic mean from the margins and display it.


# Task 2:
I start with a large loop that will take the desired number of commands and execute something for each key
Instructions defined: (M / D / S)

Therefore, we can have 3 cases: M S D

CASE 1: M, is divided into 4 cases:
1. We are not on the last line and we need to insert "00000000"
2. We are on the last line and we need to insert "00000000"
3. We are not on the last line and we do NOT have to insert "00000000"
4. We are on the last line and we do NOT have to insert "00000000"

Depending on these cases, a corresponding block of code will be executed.

CASE 2: D
In the selected position, the program will replace the desired item type with 0.

CASE 3: S
In the selected positio,n the bytes of the desired element are inverted.

At the end of task 2, the final matrix is displayed.

# Task 3:
I created an array of int eleemnt from the original one (which was char).
I turned it in a square matrix, completing the original matrix with "1"
We initialize arrays to keep the values found.

The main function of this task: save_pos, receives the initial matrix,
calculates the number of "0" in it, then fill the first black hole with 1, using flood fill algorithm
then calculates the number of 0 remaining, their difference representing the supermassivity of the black hole,
saved in "keep", and its position in "position_array". Then fill the next one and so on/
until there are no more black holes.

After this function, we look for the maximum supermassivity in our keep array.
and we display it alongside its positions, after which we release the remaining allocated space.
